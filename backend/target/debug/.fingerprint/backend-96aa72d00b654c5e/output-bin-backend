{"$message_type":"diagnostic","message":"unresolved imports `crate::db::DbConn`, `crate::api::ApiResponse`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/api/airway_options.rs","byte_start":90,"byte_end":100,"line_start":2,"line_end":2,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"use crate::{db::DbConn, models::airway_options::{AirwayOption, NewAirwayOption}, api::ApiResponse};","highlight_start":13,"highlight_end":23}],"label":"no `DbConn` in `db`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/airway_options.rs","byte_start":159,"byte_end":175,"line_start":2,"line_end":2,"column_start":82,"column_end":98,"is_primary":true,"text":[{"text":"use crate::{db::DbConn, models::airway_options::{AirwayOption, NewAirwayOption}, api::ApiResponse};","highlight_start":82,"highlight_end":98}],"label":"no `ApiResponse` in `api`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `crate::db::DbConn`, `crate::api::ApiResponse`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/airway_options.rs:2:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::{db::DbConn, models::airway_options::{AirwayOption, NewAirwayOption}, api::ApiResponse};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `DbConn` in `db`\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `ApiResponse` in `api`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `crate::db::DbConn`, `crate::api::ApiResponse`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/api/cannula_sites.rs","byte_start":90,"byte_end":100,"line_start":2,"line_end":2,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"use crate::{db::DbConn, models::cannula_sites::{CannulaSite, NewCannulaSite}, api::ApiResponse};","highlight_start":13,"highlight_end":23}],"label":"no `DbConn` in `db`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/cannula_sites.rs","byte_start":156,"byte_end":172,"line_start":2,"line_end":2,"column_start":79,"column_end":95,"is_primary":true,"text":[{"text":"use crate::{db::DbConn, models::cannula_sites::{CannulaSite, NewCannulaSite}, api::ApiResponse};","highlight_start":79,"highlight_end":95}],"label":"no `ApiResponse` in `api`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `crate::db::DbConn`, `crate::api::ApiResponse`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/cannula_sites.rs:2:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::{db::DbConn, models::cannula_sites::{CannulaSite, NewCannulaSite}, api::ApiResponse};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `DbConn` in `db`\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `ApiResponse` in `api`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `crate::db::DbConn`, `crate::api::ApiResponse`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/api/inotropic_supports.rs","byte_start":90,"byte_end":100,"line_start":2,"line_end":2,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"use crate::{db::DbConn, models::inotropic_supports::{InotropicSupport, NewInotropicSupport}, api::ApiResponse};","highlight_start":13,"highlight_end":23}],"label":"no `DbConn` in `db`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/inotropic_supports.rs","byte_start":171,"byte_end":187,"line_start":2,"line_end":2,"column_start":94,"column_end":110,"is_primary":true,"text":[{"text":"use crate::{db::DbConn, models::inotropic_supports::{InotropicSupport, NewInotropicSupport}, api::ApiResponse};","highlight_start":94,"highlight_end":110}],"label":"no `ApiResponse` in `api`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `crate::db::DbConn`, `crate::api::ApiResponse`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/inotropic_supports.rs:2:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::{db::DbConn, models::inotropic_supports::{InotropicSupport, NewInotropicSupport}, api::ApiResponse};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `DbConn` in `db`\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `ApiResponse` in `api`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `chrono`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/models/baby.rs","byte_start":65,"byte_end":71,"line_start":3,"line_end":3,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"use chrono::{DateTime, Utc};","highlight_start":5,"highlight_end":11}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `chrono`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/baby.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse chrono::{DateTime, Utc};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `chrono`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":65,"byte_end":71,"line_start":3,"line_end":3,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"use chrono::{DateTime, Utc};","highlight_start":5,"highlight_end":11}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `chrono`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse chrono::{DateTime, Utc};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `chrono`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":65,"byte_end":71,"line_start":3,"line_end":3,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"use chrono::{DateTime, Utc};","highlight_start":5,"highlight_end":11}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `chrono`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse chrono::{DateTime, Utc};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `chrono`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":65,"byte_end":71,"line_start":3,"line_end":3,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"use chrono::{DateTime, Utc};","highlight_start":5,"highlight_end":11}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `chrono`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse chrono::{DateTime, Utc};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `chrono`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":65,"byte_end":71,"line_start":3,"line_end":3,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"use chrono::{DateTime, Utc};","highlight_start":5,"highlight_end":11}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `chrono`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse chrono::{DateTime, Utc};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::db::db::schema`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/api/auth.rs","byte_start":208,"byte_end":214,"line_start":6,"line_end":6,"column_start":20,"column_end":26,"is_primary":true,"text":[{"text":"use crate::db::db::schema::users as users_schema;","highlight_start":20,"highlight_end":26}],"label":"could not find `schema` in `db`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::db::db::schema`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/auth.rs:6:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::db::db::schema::users as users_schema;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `schema` in `db`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::db::db::ConnDb`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/api/vitals.rs","byte_start":76,"byte_end":97,"line_start":2,"line_end":2,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use crate::db::db::ConnDb;","highlight_start":5,"highlight_end":26}],"label":"no `ConnDb` in `db::db`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::db::db::ConnDb`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/vitals.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::db::db::ConnDb;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `ConnDb` in `db::db`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::db::db::ConnDb`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/api/baby.rs","byte_start":76,"byte_end":97,"line_start":2,"line_end":2,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use crate::db::db::ConnDb;","highlight_start":5,"highlight_end":26}],"label":"no `ConnDb` in `db::db`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::db::db::ConnDb`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/baby.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::db::db::ConnDb;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `ConnDb` in `db::db`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `chrono`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/api/vitals.rs","byte_start":1498,"byte_end":1504,"line_start":35,"line_end":35,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"            created_at: chrono::Utc::now(),","highlight_start":25,"highlight_end":31}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `chrono`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/vitals.rs:35:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            created_at: chrono::Utc::now(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `chrono`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/api/vitals.rs","byte_start":1542,"byte_end":1548,"line_start":36,"line_end":36,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"            updated_at: chrono::Utc::now(),","highlight_start":25,"highlight_end":31}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `chrono`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/vitals.rs:36:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            updated_at: chrono::Utc::now(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `chrono`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/api/vitals.rs","byte_start":2872,"byte_end":2878,"line_start":65,"line_end":65,"column_start":39,"column_end":45,"is_primary":true,"text":[{"text":"                vitals::updated_at.eq(chrono::Utc::now()),","highlight_start":39,"highlight_end":45}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `chrono`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/vitals.rs:65:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                vitals::updated_at.eq(chrono::Utc::now()),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `chrono`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/api/baby.rs","byte_start":2166,"byte_end":2172,"line_start":50,"line_end":50,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"            created_at: chrono::Utc::now(),","highlight_start":25,"highlight_end":31}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `chrono`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/baby.rs:50:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            created_at: chrono::Utc::now(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `chrono`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/api/baby.rs","byte_start":2210,"byte_end":2216,"line_start":51,"line_end":51,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"            updated_at: chrono::Utc::now(),","highlight_start":25,"highlight_end":31}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `chrono`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/baby.rs:51:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            updated_at: chrono::Utc::now(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `chrono`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/api/baby.rs","byte_start":4042,"byte_end":4048,"line_start":87,"line_end":87,"column_start":39,"column_end":45,"is_primary":true,"text":[{"text":"                babies::updated_at.eq(chrono::Utc::now()),","highlight_start":39,"highlight_end":45}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `chrono`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/baby.rs:87:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                babies::updated_at.eq(chrono::Utc::now()),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `Cursor` in `io`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/middleware/auth_middleware.rs","byte_start":2120,"byte_end":2126,"line_start":50,"line_end":50,"column_start":79,"column_end":85,"is_primary":true,"text":[{"text":"            response.set_sized_body(response.body().len(), rocket::tokio::io::Cursor::new(json!({\"error\": \"Unauthorized\"}).to_string()));","highlight_start":79,"highlight_end":85}],"label":"could not find `Cursor` in `io`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/middleware/auth_middleware.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use rocket::fairing::{Fairing, Info, Kind};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::collections::btree_map::Cursor;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/middleware/auth_middleware.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use rocket::fairing::{Fairing, Info, Kind};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::collections::btree_set::Cursor;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/middleware/auth_middleware.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use rocket::fairing::{Fairing, Info, Kind};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::collections::linked_list::Cursor;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/middleware/auth_middleware.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use rocket::fairing::{Fairing, Info, Kind};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::io::Cursor;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you import `Cursor`, refer to it directly","code":null,"level":"help","spans":[{"file_name":"src/middleware/auth_middleware.rs","byte_start":2101,"byte_end":2120,"line_start":50,"line_end":50,"column_start":60,"column_end":79,"is_primary":true,"text":[{"text":"            response.set_sized_body(response.body().len(), rocket::tokio::io::Cursor::new(json!({\"error\": \"Unauthorized\"}).to_string()));","highlight_start":60,"highlight_end":79}],"label":null,"suggested_replacement":"","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `Cursor` in `io`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/middleware/auth_middleware.rs:50:79\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0me.body().len(), rocket::tokio::io::Cursor::new(json!({\"error\": \"Unauthorized\"}).to_string()));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `Cursor` in `io`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use std::collections::btree_map::Cursor;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use std::collections::btree_set::Cursor;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use std::collections::linked_list::Cursor;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use std::io::Cursor;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you import `Cursor`, refer to it directly\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            response.set_sized_body(response.body().len(), \u001b[0m\u001b[0m\u001b[38;5;9mrocket::tokio::io::\u001b[0m\u001b[0mCursor::new(json!({\"error\": \"Unauthorized\"}).to_string()));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            response.set_sized_body(response.body().len(), Cursor::new(json!({\"error\": \"Unauthorized\"}).to_string()));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `babies`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":1492,"byte_end":1498,"line_start":50,"line_end":50,"column_start":21,"column_end":27,"is_primary":true,"text":[{"text":"joinable!(vitals -> babies (baby_id));","highlight_start":21,"highlight_end":27}],"label":"use of undeclared crate or module `babies`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/models/vitals.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::db::db::babies::dsl::babies;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/models/vitals.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::models::baby::babies::dsl::babies;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `babies`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:50:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mjoinable!(vitals -> babies (baby_id));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `babies`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::db::db::babies::dsl::babies;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::models::baby::babies::dsl::babies;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `babies`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":1550,"byte_end":1556,"line_start":52,"line_end":52,"column_start":39,"column_end":45,"is_primary":true,"text":[{"text":"allow_tables_to_appear_in_same_query!(babies, vitals);","highlight_start":39,"highlight_end":45}],"label":"use of undeclared crate or module `babies`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/models/vitals.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::db::db::babies::dsl::babies;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/models/vitals.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::models::baby::babies::dsl::babies;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `babies`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:52:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mallow_tables_to_appear_in_same_query!(babies, vitals);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `babies`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::db::db::babies::dsl::babies;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::models::baby::babies::dsl::babies;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `vitals`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":1420,"byte_end":1426,"line_start":53,"line_end":53,"column_start":29,"column_end":35,"is_primary":true,"text":[{"text":"joinable!(airway_options -> vitals (vitals_id));","highlight_start":29,"highlight_end":35}],"label":"use of undeclared crate or module `vitals`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/models/airway_options.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::db::db::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/models/airway_options.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::models::vitals::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:53:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mjoinable!(airway_options -> vitals (vitals_id));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::db::db::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::models::vitals::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `vitals`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":1496,"byte_end":1502,"line_start":55,"line_end":55,"column_start":55,"column_end":61,"is_primary":true,"text":[{"text":"allow_tables_to_appear_in_same_query!(airway_options, vitals);","highlight_start":55,"highlight_end":61}],"label":"use of undeclared crate or module `vitals`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/models/airway_options.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::db::db::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/models/airway_options.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::models::vitals::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:55:55\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mallow_tables_to_appear_in_same_query!(airway_options, vitals);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::db::db::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::models::vitals::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `vitals`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":1252,"byte_end":1258,"line_start":44,"line_end":44,"column_start":28,"column_end":34,"is_primary":true,"text":[{"text":"joinable!(cannula_sites -> vitals (vitals_id));","highlight_start":28,"highlight_end":34}],"label":"use of undeclared crate or module `vitals`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::db::db::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/models/cannula_sites.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::models::vitals::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:44:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mjoinable!(cannula_sites -> vitals (vitals_id));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::db::db::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::models::vitals::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `vitals`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":1327,"byte_end":1333,"line_start":46,"line_end":46,"column_start":54,"column_end":60,"is_primary":true,"text":[{"text":"allow_tables_to_appear_in_same_query!(cannula_sites, vitals);","highlight_start":54,"highlight_end":60}],"label":"use of undeclared crate or module `vitals`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::db::db::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/models/cannula_sites.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::models::vitals::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:46:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mallow_tables_to_appear_in_same_query!(cannula_sites, vitals);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::db::db::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::models::vitals::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `vitals`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1768,"byte_end":1774,"line_start":54,"line_end":54,"column_start":33,"column_end":39,"is_primary":true,"text":[{"text":"joinable!(inotropic_supports -> vitals (vitals_id));","highlight_start":33,"highlight_end":39}],"label":"use of undeclared crate or module `vitals`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::db::db::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/models/inotropic_supports.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::models::vitals::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:54:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mjoinable!(inotropic_supports -> vitals (vitals_id));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::db::db::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::models::vitals::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `vitals`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1848,"byte_end":1854,"line_start":56,"line_end":56,"column_start":59,"column_end":65,"is_primary":true,"text":[{"text":"allow_tables_to_appear_in_same_query!(inotropic_supports, vitals);","highlight_start":59,"highlight_end":65}],"label":"use of undeclared crate or module `vitals`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::db::db::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/models/inotropic_supports.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::models::vitals::vitals::dsl::vitals;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:56:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mallow_tables_to_appear_in_same_query!(inotropic_supports, vitals);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `vitals`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::db::db::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::models::vitals::vitals::dsl::vitals;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Connection`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/db/db.rs","byte_start":27,"byte_end":37,"line_start":1,"line_end":1,"column_start":28,"column_end":38,"is_primary":true,"text":[{"text":"use diesel::{PgConnection, Connection, r2d2::{ConnectionManager, Pool, PooledConnection, PoolError}};","highlight_start":28,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/db/db.rs","byte_start":25,"byte_end":37,"line_start":1,"line_end":1,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"use diesel::{PgConnection, Connection, r2d2::{ConnectionManager, Pool, PooledConnection, PoolError}};","highlight_start":26,"highlight_end":38}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Connection`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db/db.rs:1:28\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse diesel::{PgConnection, Connection, r2d2::{ConnectionManager, Pool, PooledConnection, PoolError}};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::config::config::Config`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/middleware/auth_middleware.rs","byte_start":188,"byte_end":217,"line_start":5,"line_end":5,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"use crate::config::config::Config; // Updated import path","highlight_start":5,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/middleware/auth_middleware.rs","byte_start":184,"byte_end":218,"line_start":5,"line_end":5,"column_start":1,"column_end":35,"is_primary":true,"text":[{"text":"use crate::config::config::Config; // Updated import path","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::config::config::Config`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/middleware/auth_middleware.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::config::config::Config; // Updated import path\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `fairing::AdHoc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/api/auth.rs","byte_start":53,"byte_end":67,"line_start":1,"line_end":1,"column_start":54,"column_end":68,"is_primary":true,"text":[{"text":"use rocket::{post, routes, serde::json::Json, State, fairing::AdHoc};","highlight_start":54,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/api/auth.rs","byte_start":51,"byte_end":67,"line_start":1,"line_end":1,"column_start":52,"column_end":68,"is_primary":true,"text":[{"text":"use rocket::{post, routes, serde::json::Json, State, fairing::AdHoc};","highlight_start":52,"highlight_end":68}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `fairing::AdHoc`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/auth.rs:1:54\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rocket::{post, routes, serde::json::Json, State, fairing::AdHoc};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `State`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/api/vitals.rs","byte_start":64,"byte_end":69,"line_start":1,"line_end":1,"column_start":65,"column_end":70,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, routes, serde::json::Json, State};","highlight_start":65,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/api/vitals.rs","byte_start":62,"byte_end":69,"line_start":1,"line_end":1,"column_start":63,"column_end":70,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, routes, serde::json::Json, State};","highlight_start":63,"highlight_end":70}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `State`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/vitals.rs:1:65\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rocket::{get, post, put, delete, routes, serde::json::Json, State};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `State` and `patch`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/api/airway_options.rs","byte_start":37,"byte_end":42,"line_start":1,"line_end":1,"column_start":38,"column_end":43,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":38,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/airway_options.rs","byte_start":63,"byte_end":68,"line_start":1,"line_end":1,"column_start":64,"column_end":69,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":64,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/api/airway_options.rs","byte_start":35,"byte_end":42,"line_start":1,"line_end":1,"column_start":36,"column_end":43,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":36,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/api/airway_options.rs","byte_start":61,"byte_end":68,"line_start":1,"line_end":1,"column_start":62,"column_end":69,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":62,"highlight_end":69}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `State` and `patch`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/airway_options.rs:1:38\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `State` and `patch`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/api/cannula_sites.rs","byte_start":37,"byte_end":42,"line_start":1,"line_end":1,"column_start":38,"column_end":43,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":38,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/cannula_sites.rs","byte_start":63,"byte_end":68,"line_start":1,"line_end":1,"column_start":64,"column_end":69,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":64,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/api/cannula_sites.rs","byte_start":35,"byte_end":42,"line_start":1,"line_end":1,"column_start":36,"column_end":43,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":36,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/api/cannula_sites.rs","byte_start":61,"byte_end":68,"line_start":1,"line_end":1,"column_start":62,"column_end":69,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":62,"highlight_end":69}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `State` and `patch`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/cannula_sites.rs:1:38\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `State` and `patch`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/api/inotropic_supports.rs","byte_start":37,"byte_end":42,"line_start":1,"line_end":1,"column_start":38,"column_end":43,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":38,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/inotropic_supports.rs","byte_start":63,"byte_end":68,"line_start":1,"line_end":1,"column_start":64,"column_end":69,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":64,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/api/inotropic_supports.rs","byte_start":35,"byte_end":42,"line_start":1,"line_end":1,"column_start":36,"column_end":43,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":36,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/api/inotropic_supports.rs","byte_start":61,"byte_end":68,"line_start":1,"line_end":1,"column_start":62,"column_end":69,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};","highlight_start":62,"highlight_end":69}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `State` and `patch`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/inotropic_supports.rs:1:38\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rocket::{get, post, put, delete, patch, serde::json::Json, State, Route};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `State`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/api/baby.rs","byte_start":64,"byte_end":69,"line_start":1,"line_end":1,"column_start":65,"column_end":70,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, routes, serde::json::Json, State};","highlight_start":65,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/api/baby.rs","byte_start":62,"byte_end":69,"line_start":1,"line_end":1,"column_start":63,"column_end":70,"is_primary":true,"text":[{"text":"use rocket::{get, post, put, delete, routes, serde::json::Json, State};","highlight_start":63,"highlight_end":70}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `State`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/baby.rs:1:65\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rocket::{get, post, put, delete, routes, serde::json::Json, State};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::vitals::vitals::table>` for type `models::vitals::vitals::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::vitals::vitals::table>` for type `models::vitals::vitals::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:34:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    vitals (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        baby_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Alias<_>>` for type `models::vitals::vitals::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"upstream crates may add a new impl of trait `diesel::Table` for type `diesel::query_source::Alias<_>` in future versions","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Alias<_>>` for type `models::vitals::vitals::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:34:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    vitals (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        baby_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: upstream crates may add a new impl of trait `diesel::Table` for type `diesel::query_source::Alias<_>` in future versions\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Only<models::vitals::vitals::table>>` for type `models::vitals::vitals::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Only<models::vitals::vitals::table>>` for type `models::vitals::vitals::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:34:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    vitals (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        baby_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::vitals::vitals::table>` for type `Only<models::vitals::vitals::table>`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::vitals::vitals::table>` for type `Only<models::vitals::vitals::table>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:34:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    vitals (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        baby_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Tablesample<models::vitals::vitals::table, _>>` for type `models::vitals::vitals::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Tablesample<models::vitals::vitals::table, _>>` for type `models::vitals::vitals::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:34:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    vitals (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        baby_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::vitals::vitals::table>` for type `Tablesample<models::vitals::vitals::table, _>`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::vitals::vitals::table>` for type `Tablesample<models::vitals::vitals::table, _>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:34:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    vitals (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        baby_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::airway_options::airway_options::table>` for type `models::airway_options::airway_options::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::airway_options::airway_options::table>` for type `models::airway_options::airway_options::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:36:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    airway_options (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Alias<_>>` for type `models::airway_options::airway_options::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"upstream crates may add a new impl of trait `diesel::Table` for type `diesel::query_source::Alias<_>` in future versions","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Alias<_>>` for type `models::airway_options::airway_options::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:36:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    airway_options (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: upstream crates may add a new impl of trait `diesel::Table` for type `diesel::query_source::Alias<_>` in future versions\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Only<models::airway_options::airway_options::table>>` for type `models::airway_options::airway_options::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Only<models::airway_options::airway_options::table>>` for type `models::airway_options::airway_options::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:36:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    airway_options (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::airway_options::airway_options::table>` for type `Only<models::airway_options::airway_options::table>`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::airway_options::airway_options::table>` for type `Only<models::airway_options::airway_options::table>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:36:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    airway_options (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Tablesample<models::airway_options::airway_options::table, _>>` for type `models::airway_options::airway_options::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Tablesample<models::airway_options::airway_options::table, _>>` for type `models::airway_options::airway_options::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:36:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    airway_options (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::airway_options::airway_options::table>` for type `Tablesample<models::airway_options::airway_options::table, _>`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::airway_options::airway_options::table>` for type `Tablesample<models::airway_options::airway_options::table, _>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:36:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    airway_options (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::cannula_sites::cannula_sites::table>` for type `models::cannula_sites::cannula_sites::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::cannula_sites::cannula_sites::table>` for type `models::cannula_sites::cannula_sites::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cannula_sites (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Alias<_>>` for type `models::cannula_sites::cannula_sites::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"upstream crates may add a new impl of trait `diesel::Table` for type `diesel::query_source::Alias<_>` in future versions","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Alias<_>>` for type `models::cannula_sites::cannula_sites::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cannula_sites (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: upstream crates may add a new impl of trait `diesel::Table` for type `diesel::query_source::Alias<_>` in future versions\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Only<models::cannula_sites::cannula_sites::table>>` for type `models::cannula_sites::cannula_sites::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Only<models::cannula_sites::cannula_sites::table>>` for type `models::cannula_sites::cannula_sites::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cannula_sites (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::cannula_sites::cannula_sites::table>` for type `Only<models::cannula_sites::cannula_sites::table>`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::cannula_sites::cannula_sites::table>` for type `Only<models::cannula_sites::cannula_sites::table>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cannula_sites (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Tablesample<models::cannula_sites::cannula_sites::table, _>>` for type `models::cannula_sites::cannula_sites::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Tablesample<models::cannula_sites::cannula_sites::table, _>>` for type `models::cannula_sites::cannula_sites::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cannula_sites (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::cannula_sites::cannula_sites::table>` for type `Tablesample<models::cannula_sites::cannula_sites::table, _>`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::cannula_sites::cannula_sites::table>` for type `Tablesample<models::cannula_sites::cannula_sites::table, _>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cannula_sites (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::inotropic_supports::inotropic_supports::table>` for type `models::inotropic_supports::inotropic_supports::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::inotropic_supports::inotropic_supports::table>` for type `models::inotropic_supports::inotropic_supports::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    inotropic_supports (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Alias<_>>` for type `models::inotropic_supports::inotropic_supports::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"upstream crates may add a new impl of trait `diesel::Table` for type `diesel::query_source::Alias<_>` in future versions","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Alias<_>>` for type `models::inotropic_supports::inotropic_supports::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    inotropic_supports (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: upstream crates may add a new impl of trait `diesel::Table` for type `diesel::query_source::Alias<_>` in future versions\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Only<models::inotropic_supports::inotropic_supports::table>>` for type `models::inotropic_supports::inotropic_supports::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Only<models::inotropic_supports::inotropic_supports::table>>` for type `models::inotropic_supports::inotropic_supports::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    inotropic_supports (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::inotropic_supports::inotropic_supports::table>` for type `Only<models::inotropic_supports::inotropic_supports::table>`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::inotropic_supports::inotropic_supports::table>` for type `Only<models::inotropic_supports::inotropic_supports::table>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    inotropic_supports (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<Tablesample<models::inotropic_supports::inotropic_supports::table, _>>` for type `models::inotropic_supports::inotropic_supports::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<Tablesample<models::inotropic_supports::inotropic_supports::table, _>>` for type `models::inotropic_supports::inotropic_supports::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    inotropic_supports (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AppearsInFromClause<models::inotropic_supports::inotropic_supports::table>` for type `Tablesample<models::inotropic_supports::inotropic_supports::table, _>`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2> AppearsInFromClause<T2> for T1\n  where T1: TableNotEqual<T2>, T1: Table, T2: Table;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AppearsInFromClause<models::inotropic_supports::inotropic_supports::table>` for type `Tablesample<models::inotropic_supports::inotropic_supports::table, _>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    inotropic_supports (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2> AppearsInFromClause<T2> for T1\u001b[0m\n\u001b[0m             where T1: TableNotEqual<T2>, T1: Table, T2: Table;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AliasAppearsInFromClause<_, models::vitals::vitals::table>` for type `models::vitals::vitals::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2, S> AliasAppearsInFromClause<S, T2> for T1\n  where <S as AliasSource>::Target == T1, T1: TableNotEqual<T2>, T1: Table, T2: Table, S: AliasSource;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AliasAppearsInFromClause<_, models::vitals::vitals::table>` for type `models::vitals::vitals::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:34:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    vitals (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        baby_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2, S> AliasAppearsInFromClause<S, T2> for T1\u001b[0m\n\u001b[0m             where <S as AliasSource>::Target == T1, T1: TableNotEqual<T2>, T1: Table, T2: Table, S: AliasSource;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AliasAppearsInFromClause<_, models::airway_options::airway_options::table>` for type `models::airway_options::airway_options::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2, S> AliasAppearsInFromClause<S, T2> for T1\n  where <S as AliasSource>::Target == T1, T1: TableNotEqual<T2>, T1: Table, T2: Table, S: AliasSource;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AliasAppearsInFromClause<_, models::airway_options::airway_options::table>` for type `models::airway_options::airway_options::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:36:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    airway_options (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2, S> AliasAppearsInFromClause<S, T2> for T1\u001b[0m\n\u001b[0m             where <S as AliasSource>::Target == T1, T1: TableNotEqual<T2>, T1: Table, T2: Table, S: AliasSource;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AliasAppearsInFromClause<_, models::cannula_sites::cannula_sites::table>` for type `models::cannula_sites::cannula_sites::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2, S> AliasAppearsInFromClause<S, T2> for T1\n  where <S as AliasSource>::Target == T1, T1: TableNotEqual<T2>, T1: Table, T2: Table, S: AliasSource;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AliasAppearsInFromClause<_, models::cannula_sites::cannula_sites::table>` for type `models::cannula_sites::cannula_sites::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cannula_sites (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2, S> AliasAppearsInFromClause<S, T2> for T1\u001b[0m\n\u001b[0m             where <S as AliasSource>::Target == T1, T1: TableNotEqual<T2>, T1: Table, T2: Table, S: AliasSource;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AliasAppearsInFromClause<_, models::inotropic_supports::inotropic_supports::table>` for type `models::inotropic_supports::inotropic_supports::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2, S> AliasAppearsInFromClause<S, T2> for T1\n  where <S as AliasSource>::Target == T1, T1: TableNotEqual<T2>, T1: Table, T2: Table, S: AliasSource;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AliasAppearsInFromClause<_, models::inotropic_supports::inotropic_supports::table>` for type `models::inotropic_supports::inotropic_supports::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    inotropic_supports (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2, S> AliasAppearsInFromClause<S, T2> for T1\u001b[0m\n\u001b[0m             where <S as AliasSource>::Target == T1, T1: TableNotEqual<T2>, T1: Table, T2: Table, S: AliasSource;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AliasAliasAppearsInFromClause<models::vitals::vitals::table, _, _>` for type `models::vitals::vitals::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2, S1, S2> AliasAliasAppearsInFromClause<T1, S2, S1> for T2\n  where <S1 as AliasSource>::Target == T1, <S2 as AliasSource>::Target == T2, T1: TableNotEqual<T2>, T1: Table, T2: Table, S1: AliasSource, S2: AliasSource;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AliasAliasAppearsInFromClause<models::vitals::vitals::table, _, _>` for type `models::vitals::vitals::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:34:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    vitals (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        baby_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2, S1, S2> AliasAliasAppearsInFromClause<T1, S2, S1> for T2\u001b[0m\n\u001b[0m             where <S1 as AliasSource>::Target == T1, <S2 as AliasSource>::Target == T2, T1: TableNotEqual<T2>, T1: Table, T2: Table, S1: AliasSource, S2: AliasSource;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AliasAliasAppearsInFromClause<models::airway_options::airway_options::table, _, _>` for type `models::airway_options::airway_options::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2, S1, S2> AliasAliasAppearsInFromClause<T1, S2, S1> for T2\n  where <S1 as AliasSource>::Target == T1, <S2 as AliasSource>::Target == T2, T1: TableNotEqual<T2>, T1: Table, T2: Table, S1: AliasSource, S2: AliasSource;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AliasAliasAppearsInFromClause<models::airway_options::airway_options::table, _, _>` for type `models::airway_options::airway_options::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:36:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    airway_options (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2, S1, S2> AliasAliasAppearsInFromClause<T1, S2, S1> for T2\u001b[0m\n\u001b[0m             where <S1 as AliasSource>::Target == T1, <S2 as AliasSource>::Target == T2, T1: TableNotEqual<T2>, T1: Table, T2: Table, S1: AliasSource, S2: AliasSource;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AliasAliasAppearsInFromClause<models::cannula_sites::cannula_sites::table, _, _>` for type `models::cannula_sites::cannula_sites::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2, S1, S2> AliasAliasAppearsInFromClause<T1, S2, S1> for T2\n  where <S1 as AliasSource>::Target == T1, <S2 as AliasSource>::Target == T2, T1: TableNotEqual<T2>, T1: Table, T2: Table, S1: AliasSource, S2: AliasSource;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AliasAliasAppearsInFromClause<models::cannula_sites::cannula_sites::table, _, _>` for type `models::cannula_sites::cannula_sites::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cannula_sites (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2, S1, S2> AliasAliasAppearsInFromClause<T1, S2, S1> for T2\u001b[0m\n\u001b[0m             where <S1 as AliasSource>::Target == T1, <S2 as AliasSource>::Target == T2, T1: TableNotEqual<T2>, T1: Table, T2: Table, S1: AliasSource, S2: AliasSource;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `AliasAliasAppearsInFromClause<models::inotropic_supports::inotropic_supports::table, _, _>` for type `models::inotropic_supports::inotropic_supports::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<T1, T2, S1, S2> AliasAliasAppearsInFromClause<T1, S2, S1> for T2\n  where <S1 as AliasSource>::Target == T1, <S2 as AliasSource>::Target == T2, T1: TableNotEqual<T2>, T1: Table, T2: Table, S1: AliasSource, S2: AliasSource;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `AliasAliasAppearsInFromClause<models::inotropic_supports::inotropic_supports::table, _, _>` for type `models::inotropic_supports::inotropic_supports::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    inotropic_supports (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<T1, T2, S1, S2> AliasAliasAppearsInFromClause<T1, S2, S1> for T2\u001b[0m\n\u001b[0m             where <S1 as AliasSource>::Target == T1, <S2 as AliasSource>::Target == T2, T1: TableNotEqual<T2>, T1: Table, T2: Table, S1: AliasSource, S2: AliasSource;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `FieldAliasMapperAssociatedTypesDisjointnessTrick<models::vitals::vitals::table, _, _>` for type `models::vitals::vitals::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/vitals.rs","byte_start":1001,"byte_end":1470,"line_start":34,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    vitals (id) {","highlight_start":1,"highlight_end":18},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        baby_id -> Int4,","highlight_start":1,"highlight_end":25},{"text":"        heart_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":38},{"text":"        respiratory_rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":44},{"text":"        blood_pressure_systolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":51},{"text":"        blood_pressure_diastolic -> Nullable<Int4>,","highlight_start":1,"highlight_end":52},{"text":"        temperature -> Nullable<Float4>,","highlight_start":1,"highlight_end":41},{"text":"        capillary_refill_time -> Nullable<Int4>,","highlight_start":1,"highlight_end":49},{"text":"        perfusion_index -> Nullable<Float4>,","highlight_start":1,"highlight_end":45},{"text":"        created_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"        updated_at -> Timestamptz,","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<TS, TC, S, C> FieldAliasMapperAssociatedTypesDisjointnessTrick<TC, S, C> for TS\n  where <S as AliasSource>::Target == TS, <C as Column>::Table == TC, S: AliasSource, C: Column, TC: Table, TS: TableNotEqual<TC>;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `FieldAliasMapperAssociatedTypesDisjointnessTrick<models::vitals::vitals::table, _, _>` for type `models::vitals::vitals::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/vitals.rs:34:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    vitals (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        baby_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<TS, TC, S, C> FieldAliasMapperAssociatedTypesDisjointnessTrick<TC, S, C> for TS\u001b[0m\n\u001b[0m             where <S as AliasSource>::Target == TS, <C as Column>::Table == TC, S: AliasSource, C: Column, TC: Table, TS: TableNotEqual<TC>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `FieldAliasMapperAssociatedTypesDisjointnessTrick<models::airway_options::airway_options::table, _, _>` for type `models::airway_options::airway_options::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":961,"byte_end":1390,"line_start":36,"line_end":51,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    airway_options (id) {","highlight_start":1,"highlight_end":26},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        option_type -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        option_name -> Varchar,","highlight_start":1,"highlight_end":32},{"text":"        fio2 -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        peep -> Nullable<Float4>,","highlight_start":1,"highlight_end":34},{"text":"        rate -> Nullable<Int4>,","highlight_start":1,"highlight_end":32},{"text":"        pip -> Nullable<Float4>,","highlight_start":1,"highlight_end":33},{"text":"        mode -> Nullable<Varchar>,","highlight_start":1,"highlight_end":35},{"text":"        settings_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":42},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<TS, TC, S, C> FieldAliasMapperAssociatedTypesDisjointnessTrick<TC, S, C> for TS\n  where <S as AliasSource>::Target == TS, <C as Column>::Table == TC, S: AliasSource, C: Column, TC: Table, TS: TableNotEqual<TC>;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `FieldAliasMapperAssociatedTypesDisjointnessTrick<models::airway_options::airway_options::table, _, _>` for type `models::airway_options::airway_options::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:36:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    airway_options (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<TS, TC, S, C> FieldAliasMapperAssociatedTypesDisjointnessTrick<TC, S, C> for TS\u001b[0m\n\u001b[0m             where <S as AliasSource>::Target == TS, <C as Column>::Table == TC, S: AliasSource, C: Column, TC: Table, TS: TableNotEqual<TC>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `FieldAliasMapperAssociatedTypesDisjointnessTrick<models::cannula_sites::cannula_sites::table, _, _>` for type `models::cannula_sites::cannula_sites::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/cannula_sites.rs","byte_start":857,"byte_end":1223,"line_start":30,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    cannula_sites (id) {","highlight_start":1,"highlight_end":25},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        site_name -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        insertion_time -> Nullable<Timestamp>,","highlight_start":1,"highlight_end":47},{"text":"        line_type -> Nullable<Varchar>,","highlight_start":1,"highlight_end":40},{"text":"        xray_post_insertion -> Nullable<Bool>,","highlight_start":1,"highlight_end":47},{"text":"        time_since_insertion -> Nullable<Int4>,","highlight_start":1,"highlight_end":48},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<TS, TC, S, C> FieldAliasMapperAssociatedTypesDisjointnessTrick<TC, S, C> for TS\n  where <S as AliasSource>::Target == TS, <C as Column>::Table == TC, S: AliasSource, C: Column, TC: Table, TS: TableNotEqual<TC>;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `FieldAliasMapperAssociatedTypesDisjointnessTrick<models::cannula_sites::cannula_sites::table, _, _>` for type `models::cannula_sites::cannula_sites::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/cannula_sites.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cannula_sites (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<TS, TC, S, C> FieldAliasMapperAssociatedTypesDisjointnessTrick<TC, S, C> for TS\u001b[0m\n\u001b[0m             where <S as AliasSource>::Target == TS, <C as Column>::Table == TC, S: AliasSource, C: Column, TC: Table, TS: TableNotEqual<TC>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `FieldAliasMapperAssociatedTypesDisjointnessTrick<models::inotropic_supports::inotropic_supports::table, _, _>` for type `models::inotropic_supports::inotropic_supports::table`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":1213,"byte_end":1734,"line_start":37,"line_end":52,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"table! {","highlight_start":1,"highlight_end":9},{"text":"    inotropic_supports (id) {","highlight_start":1,"highlight_end":30},{"text":"        id -> Int4,","highlight_start":1,"highlight_end":20},{"text":"        vitals_id -> Int4,","highlight_start":1,"highlight_end":27},{"text":"        drug_used -> Varchar,","highlight_start":1,"highlight_end":30},{"text":"        rationale -> Nullable<Text>,","highlight_start":1,"highlight_end":37},{"text":"        ampule_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        mixing_details_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":48},{"text":"        flow_rate -> Nullable<Float4>,","highlight_start":1,"highlight_end":39},{"text":"        flow_rate_unit -> Nullable<Varchar>,","highlight_start":1,"highlight_end":45},{"text":"        escalation_deescalation_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":64},{"text":"        start_stop_events_json -> Nullable<Jsonb>,","highlight_start":1,"highlight_end":51},{"text":"        created_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"        updated_at -> Timestamp,","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"table!","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":55423,"byte_end":55475,"line_start":1541,"line_end":1541,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub fn table_proc(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"conflicting implementation in crate `diesel`:\n- impl<TS, TC, S, C> FieldAliasMapperAssociatedTypesDisjointnessTrick<TC, S, C> for TS\n  where <S as AliasSource>::Target == TS, <C as Column>::Table == TC, S: AliasSource, C: Column, TC: Table, TS: TableNotEqual<TC>;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `FieldAliasMapperAssociatedTypesDisjointnessTrick<models::inotropic_supports::inotropic_supports::table, _, _>` for type `models::inotropic_supports::inotropic_supports::table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    inotropic_supports (id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vitals_id -> Int4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: conflicting implementation in crate `diesel`:\u001b[0m\n\u001b[0m           - impl<TS, TC, S, C> FieldAliasMapperAssociatedTypesDisjointnessTrick<TC, S, C> for TS\u001b[0m\n\u001b[0m             where <S as AliasSource>::Target == TS, <C as Column>::Table == TC, S: AliasSource, C: Column, TC: Table, TS: TableNotEqual<TC>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `on_request` has 2 parameters but the declaration in trait `on_request` has 3","code":{"code":"E0050","explanation":"An attempted implementation of a trait method has the wrong number of function\nparameters.\n\nErroneous code example:\n\n```compile_fail,E0050\ntrait Foo {\n    fn foo(&self, x: u8) -> bool;\n}\n\nstruct Bar;\n\n// error: method `foo` has 1 parameter but the declaration in trait `Foo::foo`\n// has 2\nimpl Foo for Bar {\n    fn foo(&self) -> bool { true }\n}\n```\n\nFor example, the `Foo` trait has a method `foo` with two function parameters\n(`&self` and `u8`), but the implementation of `foo` for the type `Bar` omits\nthe `u8` parameter. To fix this error, they must have the same parameters:\n\n```\ntrait Foo {\n    fn foo(&self, x: u8) -> bool;\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo(&self, x: u8) -> bool { // ok!\n        true\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/middleware/auth_middleware.rs","byte_start":503,"byte_end":535,"line_start":18,"line_end":18,"column_start":25,"column_end":57,"is_primary":true,"text":[{"text":"    async fn on_request(&self, request: &mut Request<'_>) {","highlight_start":25,"highlight_end":57}],"label":"expected 3 parameters, found 2","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`on_request` from trait: `fn(&'life0 Self, &'life1 mut rocket::Request<'life2>, &'life3 mut rocket::Data<'life4>) -> Pin<Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0050]\u001b[0m\u001b[0m\u001b[1m: method `on_request` has 2 parameters but the declaration in trait `on_request` has 3\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/middleware/auth_middleware.rs:18:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn on_request(&self, request: &mut Request<'_>) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 3 parameters, found 2\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `on_request` from trait: `\u001b[0m\u001b[0m\u001b[1m\u001b[35mfn(&'life0 Self, &'life1 mut rocket::Request<'life2>, &'life3 mut rocket::Data<'life4>) -> Pin<Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":142,"byte_end":152,"line_start":5,"line_end":5,"column_start":52,"column_end":62,"is_primary":true,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":142,"byte_end":152,"line_start":5,"line_end":5,"column_start":52,"column_end":62,"is_primary":false,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:5:52\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            &T\u001b[0m\n\u001b[0m            (T0, T1)\u001b[0m\n\u001b[0m            (T0, T1, T2)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m          and 220 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":142,"byte_end":152,"line_start":5,"line_end":5,"column_start":52,"column_end":62,"is_primary":true,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":142,"byte_end":152,"line_start":5,"line_end":5,"column_start":52,"column_end":62,"is_primary":false,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:5:52\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            &T\u001b[0m\n\u001b[0m            (T0, T1)\u001b[0m\n\u001b[0m            (T0, T1, T2)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m          and 220 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":142,"byte_end":152,"line_start":5,"line_end":5,"column_start":52,"column_end":62,"is_primary":true,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":142,"byte_end":152,"line_start":5,"line_end":5,"column_start":52,"column_end":62,"is_primary":false,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:5:52\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            &T\u001b[0m\n\u001b[0m            (T0, T1)\u001b[0m\n\u001b[0m            (T0, T1, T2)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m          and 220 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":142,"byte_end":152,"line_start":5,"line_end":5,"column_start":52,"column_end":62,"is_primary":true,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":142,"byte_end":152,"line_start":5,"line_end":5,"column_start":52,"column_end":62,"is_primary":false,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:5:52\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            &T\u001b[0m\n\u001b[0m            (T0, T1)\u001b[0m\n\u001b[0m            (T0, T1, T2)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m          and 220 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":608,"byte_end":618,"line_start":22,"line_end":22,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":608,"byte_end":618,"line_start":22,"line_end":22,"column_start":30,"column_end":40,"is_primary":false,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:22:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Deserialize, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":608,"byte_end":618,"line_start":22,"line_end":22,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":608,"byte_end":618,"line_start":22,"line_end":22,"column_start":30,"column_end":40,"is_primary":false,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:22:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Deserialize, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":608,"byte_end":618,"line_start":22,"line_end":22,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":608,"byte_end":618,"line_start":22,"line_end":22,"column_start":30,"column_end":40,"is_primary":false,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:22:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Deserialize, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":608,"byte_end":618,"line_start":22,"line_end":22,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/airway_options.rs","byte_start":608,"byte_end":618,"line_start":22,"line_end":22,"column_start":30,"column_end":40,"is_primary":false,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:22:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Deserialize, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":464,"byte_end":477,"line_start":17,"line_end":17,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    pub settings_json: Option<serde_json::Value>,","highlight_start":9,"highlight_end":22}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:17:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub settings_json: Option<serde_json::Value>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":464,"byte_end":477,"line_start":17,"line_end":17,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    pub settings_json: Option<serde_json::Value>,","highlight_start":9,"highlight_end":22}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:17:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub settings_json: Option<serde_json::Value>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":464,"byte_end":477,"line_start":17,"line_end":17,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    pub settings_json: Option<serde_json::Value>,","highlight_start":9,"highlight_end":22}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:17:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub settings_json: Option<serde_json::Value>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":464,"byte_end":477,"line_start":17,"line_end":17,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    pub settings_json: Option<serde_json::Value>,","highlight_start":9,"highlight_end":22}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:17:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub settings_json: Option<serde_json::Value>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":916,"byte_end":929,"line_start":33,"line_end":33,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    pub settings_json: Option<serde_json::Value>,","highlight_start":9,"highlight_end":22}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:33:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub settings_json: Option<serde_json::Value>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":916,"byte_end":929,"line_start":33,"line_end":33,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    pub settings_json: Option<serde_json::Value>,","highlight_start":9,"highlight_end":22}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:33:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub settings_json: Option<serde_json::Value>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":916,"byte_end":929,"line_start":33,"line_end":33,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    pub settings_json: Option<serde_json::Value>,","highlight_start":9,"highlight_end":22}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:33:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub settings_json: Option<serde_json::Value>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":916,"byte_end":929,"line_start":33,"line_end":33,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    pub settings_json: Option<serde_json::Value>,","highlight_start":9,"highlight_end":22}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/airway_options.rs:33:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub settings_json: Option<serde_json::Value>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":178,"byte_end":188,"line_start":6,"line_end":6,"column_start":52,"column_end":62,"is_primary":true,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":178,"byte_end":188,"line_start":6,"line_end":6,"column_start":52,"column_end":62,"is_primary":false,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:6:52\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            &T\u001b[0m\n\u001b[0m            (T0, T1)\u001b[0m\n\u001b[0m            (T0, T1, T2)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m          and 220 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":178,"byte_end":188,"line_start":6,"line_end":6,"column_start":52,"column_end":62,"is_primary":true,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":178,"byte_end":188,"line_start":6,"line_end":6,"column_start":52,"column_end":62,"is_primary":false,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:6:52\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            &T\u001b[0m\n\u001b[0m            (T0, T1)\u001b[0m\n\u001b[0m            (T0, T1, T2)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m          and 220 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":178,"byte_end":188,"line_start":6,"line_end":6,"column_start":52,"column_end":62,"is_primary":true,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":178,"byte_end":188,"line_start":6,"line_end":6,"column_start":52,"column_end":62,"is_primary":false,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:6:52\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            &T\u001b[0m\n\u001b[0m            (T0, T1)\u001b[0m\n\u001b[0m            (T0, T1, T2)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m          and 220 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":178,"byte_end":188,"line_start":6,"line_end":6,"column_start":52,"column_end":62,"is_primary":true,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":178,"byte_end":188,"line_start":6,"line_end":6,"column_start":52,"column_end":62,"is_primary":false,"text":[{"text":"#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]","highlight_start":52,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:6:52\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Serialize, Deserialize, Queryable, Insertable)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            &T\u001b[0m\n\u001b[0m            (T0, T1)\u001b[0m\n\u001b[0m            (T0, T1, T2)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m          and 220 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":752,"byte_end":762,"line_start":23,"line_end":23,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":752,"byte_end":762,"line_start":23,"line_end":23,"column_start":30,"column_end":40,"is_primary":false,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:23:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Deserialize, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":752,"byte_end":762,"line_start":23,"line_end":23,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":752,"byte_end":762,"line_start":23,"line_end":23,"column_start":30,"column_end":40,"is_primary":false,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:23:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Deserialize, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":752,"byte_end":762,"line_start":23,"line_end":23,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":752,"byte_end":762,"line_start":23,"line_end":23,"column_start":30,"column_end":40,"is_primary":false,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:23:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Deserialize, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":752,"byte_end":762,"line_start":23,"line_end":23,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/inotropic_supports.rs","byte_start":752,"byte_end":762,"line_start":23,"line_end":23,"column_start":30,"column_end":40,"is_primary":false,"text":[{"text":"#[derive(Debug, Deserialize, Insertable)]","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.3/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:23:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Deserialize, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":607,"byte_end":629,"line_start":18,"line_end":18,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"    pub start_stop_events_json: Option<JsonValue>,","highlight_start":9,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:18:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub start_stop_events_json: Option<JsonValue>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":607,"byte_end":629,"line_start":18,"line_end":18,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"    pub start_stop_events_json: Option<JsonValue>,","highlight_start":9,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:18:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub start_stop_events_json: Option<JsonValue>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":607,"byte_end":629,"line_start":18,"line_end":18,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"    pub start_stop_events_json: Option<JsonValue>,","highlight_start":9,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:18:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub start_stop_events_json: Option<JsonValue>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":607,"byte_end":629,"line_start":18,"line_end":18,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"    pub start_stop_events_json: Option<JsonValue>,","highlight_start":9,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:18:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub start_stop_events_json: Option<JsonValue>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1167,"byte_end":1189,"line_start":34,"line_end":34,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"    pub start_stop_events_json: Option<JsonValue>,","highlight_start":9,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:34:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub start_stop_events_json: Option<JsonValue>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1167,"byte_end":1189,"line_start":34,"line_end":34,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"    pub start_stop_events_json: Option<JsonValue>,","highlight_start":9,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:34:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub start_stop_events_json: Option<JsonValue>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1167,"byte_end":1189,"line_start":34,"line_end":34,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"    pub start_stop_events_json: Option<JsonValue>,","highlight_start":9,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:34:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub start_stop_events_json: Option<JsonValue>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":1167,"byte_end":1189,"line_start":34,"line_end":34,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"    pub start_stop_events_json: Option<JsonValue>,","highlight_start":9,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:34:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub start_stop_events_json: Option<JsonValue>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 220 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot initialize a tuple struct which contains private fields","code":{"code":"E0423","explanation":"An identifier was used like a function name or a value was expected and the\nidentifier exists but it belongs to a different namespace.\n\nErroneous code example:\n\n```compile_fail,E0423\nstruct Foo { a: bool };\n\nlet f = Foo();\n// error: expected function, tuple struct or tuple variant, found `Foo`\n// `Foo` is a struct name, but this expression uses it like a function name\n```\n\nPlease verify you didn't misspell the name of what you actually wanted to use\nhere. Example:\n\n```\nfn Foo() -> u32 { 0 }\n\nlet f = Foo(); // ok!\n```\n\nIt is common to forget the trailing `!` on macro invocations, which would also\nyield this error:\n\n```compile_fail,E0423\nprintln(\"\");\n// error: expected function, tuple struct or tuple variant,\n// found macro `println`\n// did you mean `println!(...)`? (notice the trailing `!`)\n```\n\nAnother case where this error is emitted is when a value is expected, but\nsomething else is found:\n\n```compile_fail,E0423\npub mod a {\n    pub const I: i32 = 1;\n}\n\nfn h1() -> i32 {\n    a.I\n    //~^ ERROR expected value, found module `a`\n    // did you mean `a::I`?\n}\n```\n"},"level":"error","spans":[{"file_name":"src/api/vitals.rs","byte_start":1144,"byte_end":1151,"line_start":25,"line_end":25,"column_start":33,"column_end":40,"is_primary":true,"text":[{"text":"        rocket::response::Debug(Created(Some(Json(Vitals {","highlight_start":33,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"constructor is not visible here due to private fields","code":null,"level":"note","spans":[{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rocket-0.5.1/src/response/status.rs","byte_start":1943,"byte_end":1960,"line_start":54,"line_end":54,"column_start":23,"column_end":40,"is_primary":true,"text":[{"text":"pub struct Created<R>(Cow<'static, str>, Option<R>, Option<u64>);","highlight_start":23,"highlight_end":40}],"label":"private field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rocket-0.5.1/src/response/status.rs","byte_start":1962,"byte_end":1971,"line_start":54,"line_end":54,"column_start":42,"column_end":51,"is_primary":true,"text":[{"text":"pub struct Created<R>(Cow<'static, str>, Option<R>, Option<u64>);","highlight_start":42,"highlight_end":51}],"label":"private field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rocket-0.5.1/src/response/status.rs","byte_start":1973,"byte_end":1984,"line_start":54,"line_end":54,"column_start":53,"column_end":64,"is_primary":true,"text":[{"text":"pub struct Created<R>(Cow<'static, str>, Option<R>, Option<u64>);","highlight_start":53,"highlight_end":64}],"label":"private field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you might have meant to use the `new` associated function","code":null,"level":"help","spans":[{"file_name":"src/api/vitals.rs","byte_start":1151,"byte_end":1151,"line_start":25,"line_end":25,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"        rocket::response::Debug(Created(Some(Json(Vitals {","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"::new","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0423]\u001b[0m\u001b[0m\u001b[1m: cannot initialize a tuple struct which contains private fields\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/vitals.rs:25:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        rocket::response::Debug(Created(Some(Json(Vitals {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: constructor is not visible here due to private fields\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rocket-0.5.1/src/response/status.rs:54:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Created<R>(Cow<'static, str>, Option<R>, Option<u64>);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mprivate field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mprivate field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mprivate field\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to use the `new` associated function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        rocket::response::Debug(Created\u001b[0m\u001b[0m\u001b[38;5;10m::new\u001b[0m\u001b[0m(Some(Json(Vitals {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m+++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/api/airway_options.rs","byte_start":492,"byte_end":498,"line_start":9,"line_end":9,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"            .values(new_airway_option.into_inner())","highlight_start":14,"highlight_end":20}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/airway_options.rs:9:14\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .values(new_airway_option.into_inner())\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            &T\u001b[0m\n\u001b[0m            (T0, T1)\u001b[0m\n\u001b[0m            (T0, T1, T2)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m          and 220 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: AppearsOnTable<NoFromClause>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/api/airway_options.rs","byte_start":555,"byte_end":556,"line_start":10,"line_end":10,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"            .get_result(c)","highlight_start":25,"highlight_end":26}],"label":"the trait `AppearsOnTable<NoFromClause>` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/airway_options.rs","byte_start":544,"byte_end":554,"line_start":10,"line_end":10,"column_start":14,"column_end":24,"is_primary":false,"text":[{"text":"            .get_result(c)","highlight_start":14,"highlight_end":24}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  `&'a T` implements `AppearsOnTable<QS>`\n  `(T0, T1)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `DefaultableColumnInsertValue<ColumnInsertValue<..., ...>>` to implement `InsertValues<_, models::airway_options::airway_options::table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `(DefaultableColumnInsertValue<...>, ..., ..., ..., ..., ..., ..., ..., ...)` to implement `InsertValues<_, models::airway_options::airway_options::table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `ValuesClause<(..., ..., ..., ..., ..., ..., ..., ..., ...), ...>` to implement `QueryFragment<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `InsertStatement<table, ValuesClause<..., ...>, ..., ...>` to implement `QueryFragment<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `InsertStatement<table, ValuesClause<..., ...>>` to implement `LoadQuery<'_, _, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `get_result`","code":null,"level":"note","spans":[{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.7/src/query_dsl/mod.rs","byte_start":59209,"byte_end":59219,"line_start":1720,"line_end":1720,"column_start":8,"column_end":18,"is_primary":false,"text":[{"text":"    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":18}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.7/src/query_dsl/mod.rs","byte_start":59296,"byte_end":59322,"line_start":1722,"line_end":1722,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::get_result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/adityavel/Desktop/projects/NICU/backend/target/debug/deps/backend-96aa72d00b654c5e.long-type-10274002509851030286.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: AppearsOnTable<NoFromClause>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/airway_options.rs:10:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .get_result(c)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<NoFromClause>` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m               `&'a T` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             and 220 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `DefaultableColumnInsertValue<ColumnInsertValue<..., ...>>` to implement `InsertValues<_, models::airway_options::airway_options::table>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(DefaultableColumnInsertValue<...>, ..., ..., ..., ..., ..., ..., ..., ...)` to implement `InsertValues<_, models::airway_options::airway_options::table>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ValuesClause<(..., ..., ..., ..., ..., ..., ..., ..., ...), ...>` to implement `QueryFragment<_>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `InsertStatement<table, ValuesClause<..., ...>, ..., ...>` to implement `QueryFragment<_>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `InsertStatement<table, ValuesClause<..., ...>>` to implement `LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `get_result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.7/src/query_dsl/mod.rs:1722:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::get_result`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/adityavel/Desktop/projects/NICU/backend/target/debug/deps/backend-96aa72d00b654c5e.long-type-10274002509851030286.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `into_inner` exists for struct `Json<AirwayOption>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/models/airway_options.rs","byte_start":194,"byte_end":217,"line_start":7,"line_end":7,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"pub struct AirwayOption {","highlight_start":1,"highlight_end":24}],"label":"doesn't satisfy `AirwayOption: Sized`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/airway_options.rs","byte_start":1311,"byte_end":1321,"line_start":27,"line_end":27,"column_start":32,"column_end":42,"is_primary":true,"text":[{"text":"            .set(airway_option.into_inner())","highlight_start":32,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`{type error}: Sized`\nwhich is required by `AirwayOption: Sized`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `into_inner` exists for struct `Json<AirwayOption>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/airway_options.rs:27:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .set(airway_option.into_inner())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/models/airway_options.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct AirwayOption {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `AirwayOption: Sized`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `{type error}: Sized`\u001b[0m\n\u001b[0m           which is required by `AirwayOption: Sized`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `into_inner` exists for struct `Json<CannulaSite>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/models/cannula_sites.rs","byte_start":193,"byte_end":215,"line_start":7,"line_end":7,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub struct CannulaSite {","highlight_start":1,"highlight_end":23}],"label":"doesn't satisfy `CannulaSite: Sized`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/cannula_sites.rs","byte_start":1284,"byte_end":1294,"line_start":27,"line_end":27,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"            .set(cannula_site.into_inner())","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`{type error}: Sized`\nwhich is required by `CannulaSite: Sized`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `into_inner` exists for struct `Json<CannulaSite>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/cannula_sites.rs:27:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .set(cannula_site.into_inner())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/models/cannula_sites.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CannulaSite {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `CannulaSite: Sized`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `{type error}: Sized`\u001b[0m\n\u001b[0m           which is required by `CannulaSite: Sized`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/api/inotropic_supports.rs","byte_start":532,"byte_end":538,"line_start":9,"line_end":9,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"            .values(new_inotropic_support.into_inner())","highlight_start":14,"highlight_end":20}],"label":"the trait `diesel::Expression` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/inotropic_supports.rs:9:14\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .values(new_inotropic_support.into_inner())\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            &T\u001b[0m\n\u001b[0m            (T0, T1)\u001b[0m\n\u001b[0m            (T0, T1, T2)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m            (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m          and 220 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `serde_json::Value` to implement `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Jsonb>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `serde_json::Value: AppearsOnTable<NoFromClause>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/api/inotropic_supports.rs","byte_start":599,"byte_end":600,"line_start":10,"line_end":10,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"            .get_result(c)","highlight_start":25,"highlight_end":26}],"label":"the trait `AppearsOnTable<NoFromClause>` is not implemented for `serde_json::Value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/inotropic_supports.rs","byte_start":588,"byte_end":598,"line_start":10,"line_end":10,"column_start":14,"column_end":24,"is_primary":false,"text":[{"text":"            .get_result(c)","highlight_start":14,"highlight_end":24}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  `&'a T` implements `AppearsOnTable<QS>`\n  `(T0, T1)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\nand 220 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `DefaultableColumnInsertValue<ColumnInsertValue<..., ...>>` to implement `InsertValues<_, models::inotropic_supports::inotropic_supports::table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `(DefaultableColumnInsertValue<...>, ..., ..., ..., ..., ..., ..., ..., ...)` to implement `InsertValues<_, models::inotropic_supports::inotropic_supports::table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `ValuesClause<(..., ..., ..., ..., ..., ..., ..., ..., ...), ...>` to implement `QueryFragment<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `InsertStatement<table, ValuesClause<..., ...>, ..., ...>` to implement `QueryFragment<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `InsertStatement<table, ValuesClause<..., ...>>` to implement `LoadQuery<'_, _, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `get_result`","code":null,"level":"note","spans":[{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.7/src/query_dsl/mod.rs","byte_start":59209,"byte_end":59219,"line_start":1720,"line_end":1720,"column_start":8,"column_end":18,"is_primary":false,"text":[{"text":"    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":18}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.7/src/query_dsl/mod.rs","byte_start":59296,"byte_end":59322,"line_start":1722,"line_end":1722,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::get_result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/adityavel/Desktop/projects/NICU/backend/target/debug/deps/backend-96aa72d00b654c5e.long-type-987152993869975854.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `serde_json::Value: AppearsOnTable<NoFromClause>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/inotropic_supports.rs:10:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .get_result(c)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<NoFromClause>` is not implemented for `serde_json::Value`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m               `&'a T` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             and 220 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `DefaultableColumnInsertValue<ColumnInsertValue<..., ...>>` to implement `InsertValues<_, models::inotropic_supports::inotropic_supports::table>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(DefaultableColumnInsertValue<...>, ..., ..., ..., ..., ..., ..., ..., ...)` to implement `InsertValues<_, models::inotropic_supports::inotropic_supports::table>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ValuesClause<(..., ..., ..., ..., ..., ..., ..., ..., ...), ...>` to implement `QueryFragment<_>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `InsertStatement<table, ValuesClause<..., ...>, ..., ...>` to implement `QueryFragment<_>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `InsertStatement<table, ValuesClause<..., ...>>` to implement `LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `get_result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.7/src/query_dsl/mod.rs:1722:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::get_result`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/adityavel/Desktop/projects/NICU/backend/target/debug/deps/backend-96aa72d00b654c5e.long-type-987152993869975854.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `into_inner` exists for struct `Json<InotropicSupport>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/models/inotropic_supports.rs","byte_start":234,"byte_end":261,"line_start":8,"line_end":8,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"pub struct InotropicSupport {","highlight_start":1,"highlight_end":28}],"label":"doesn't satisfy `InotropicSupport: Sized`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/inotropic_supports.rs","byte_start":1419,"byte_end":1429,"line_start":27,"line_end":27,"column_start":36,"column_end":46,"is_primary":true,"text":[{"text":"            .set(inotropic_support.into_inner())","highlight_start":36,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`{type error}: Sized`\nwhich is required by `InotropicSupport: Sized`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `into_inner` exists for struct `Json<InotropicSupport>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/inotropic_supports.rs:27:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .set(inotropic_support.into_inner())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/models/inotropic_supports.rs:8:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct InotropicSupport {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `InotropicSupport: Sized`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `{type error}: Sized`\u001b[0m\n\u001b[0m           which is required by `InotropicSupport: Sized`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot initialize a tuple struct which contains private fields","code":{"code":"E0423","explanation":"An identifier was used like a function name or a value was expected and the\nidentifier exists but it belongs to a different namespace.\n\nErroneous code example:\n\n```compile_fail,E0423\nstruct Foo { a: bool };\n\nlet f = Foo();\n// error: expected function, tuple struct or tuple variant, found `Foo`\n// `Foo` is a struct name, but this expression uses it like a function name\n```\n\nPlease verify you didn't misspell the name of what you actually wanted to use\nhere. Example:\n\n```\nfn Foo() -> u32 { 0 }\n\nlet f = Foo(); // ok!\n```\n\nIt is common to forget the trailing `!` on macro invocations, which would also\nyield this error:\n\n```compile_fail,E0423\nprintln(\"\");\n// error: expected function, tuple struct or tuple variant,\n// found macro `println`\n// did you mean `println!(...)`? (notice the trailing `!`)\n```\n\nAnother case where this error is emitted is when a value is expected, but\nsomething else is found:\n\n```compile_fail,E0423\npub mod a {\n    pub const I: i32 = 1;\n}\n\nfn h1() -> i32 {\n    a.I\n    //~^ ERROR expected value, found module `a`\n    // did you mean `a::I`?\n}\n```\n"},"level":"error","spans":[{"file_name":"src/api/baby.rs","byte_start":1508,"byte_end":1515,"line_start":32,"line_end":32,"column_start":33,"column_end":40,"is_primary":true,"text":[{"text":"        rocket::response::Debug(Created(Some(Json(Baby {","highlight_start":33,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"constructor is not visible here due to private fields","code":null,"level":"note","spans":[{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rocket-0.5.1/src/response/status.rs","byte_start":1943,"byte_end":1960,"line_start":54,"line_end":54,"column_start":23,"column_end":40,"is_primary":true,"text":[{"text":"pub struct Created<R>(Cow<'static, str>, Option<R>, Option<u64>);","highlight_start":23,"highlight_end":40}],"label":"private field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rocket-0.5.1/src/response/status.rs","byte_start":1962,"byte_end":1971,"line_start":54,"line_end":54,"column_start":42,"column_end":51,"is_primary":true,"text":[{"text":"pub struct Created<R>(Cow<'static, str>, Option<R>, Option<u64>);","highlight_start":42,"highlight_end":51}],"label":"private field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rocket-0.5.1/src/response/status.rs","byte_start":1973,"byte_end":1984,"line_start":54,"line_end":54,"column_start":53,"column_end":64,"is_primary":true,"text":[{"text":"pub struct Created<R>(Cow<'static, str>, Option<R>, Option<u64>);","highlight_start":53,"highlight_end":64}],"label":"private field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you might have meant to use the `new` associated function","code":null,"level":"help","spans":[{"file_name":"src/api/baby.rs","byte_start":1515,"byte_end":1515,"line_start":32,"line_end":32,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"        rocket::response::Debug(Created(Some(Json(Baby {","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"::new","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0423]\u001b[0m\u001b[0m\u001b[1m: cannot initialize a tuple struct which contains private fields\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/baby.rs:32:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        rocket::response::Debug(Created(Some(Json(Baby {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: constructor is not visible here due to private fields\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adityavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rocket-0.5.1/src/response/status.rs:54:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Created<R>(Cow<'static, str>, Option<R>, Option<u64>);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mprivate field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mprivate field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mprivate field\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to use the `new` associated function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        rocket::response::Debug(Created\u001b[0m\u001b[0m\u001b[38;5;10m::new\u001b[0m\u001b[0m(Some(Json(Baby {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m+++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `set_outcome` found for mutable reference `&'life1 mut rocket::Request<'life2>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/middleware/auth_middleware.rs","byte_start":1477,"byte_end":1488,"line_start":35,"line_end":35,"column_start":37,"column_end":48,"is_primary":true,"text":[{"text":"                            request.set_outcome(Outcome::Error(Status::Unauthorized));","highlight_start":37,"highlight_end":48}],"label":"method not found in `&mut Request<'life2>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `set_outcome` found for mutable reference `&'life1 mut rocket::Request<'life2>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/middleware/auth_middleware.rs:35:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   request.set_outcome(Outcome::Error(Status::Unauthorized));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `&mut Request<'life2>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `set_outcome` found for mutable reference `&'life1 mut rocket::Request<'life2>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/middleware/auth_middleware.rs","byte_start":1703,"byte_end":1714,"line_start":41,"line_end":41,"column_start":29,"column_end":40,"is_primary":true,"text":[{"text":"                    request.set_outcome(Outcome::Error(Status::Unauthorized));","highlight_start":29,"highlight_end":40}],"label":"method not found in `&mut Request<'life2>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `set_outcome` found for mutable reference `&'life1 mut rocket::Request<'life2>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/middleware/auth_middleware.rs:41:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    request.set_outcome(Outcome::Error(Status::Unauthorized));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `&mut Request<'life2>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `len` found for reference `&rocket::response::Body<'_>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/middleware/auth_middleware.rs","byte_start":2094,"byte_end":2097,"line_start":50,"line_end":50,"column_start":53,"column_end":56,"is_primary":true,"text":[{"text":"            response.set_sized_body(response.body().len(), rocket::tokio::io::Cursor::new(json!({\"error\": \"Unauthorized\"}).to_string()));","highlight_start":53,"highlight_end":56}],"label":"method not found in `&Body<'_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `len` found for reference `&rocket::response::Body<'_>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/middleware/auth_middleware.rs:50:53\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   response.set_sized_body(response.body().len(), rocket::tokio::io::Cursor::new(json!({\"error\": \"Unauthoriz\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `&Body<'_>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 107 previous errors; 8 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 107 previous errors; 8 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0050, E0119, E0277, E0423, E0432, E0433, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0050, E0119, E0277, E0423, E0432, E0433, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0050`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0050`.\u001b[0m\n"}
